import { call, put, takeEvery } from 'redux-saga/effects';
import { SpawnRequest, IRequestParams, IBaseException } from 'services/index';

import { IBaseResponeModel } from 'models/respones/baseModel';
import { IBaseRequestModel } from 'models/requests/baseModel';

import { __COMPONENT___REDUCER_KEY } from './constants';

import { MakeIAction } from './actions';

function* runAction(params: any) {
    try {
        const request: IRequestParams<any> = {
            path: '/',
        };
        const r = SpawnRequest<IBaseRequestModel, IBaseResponeModel>('GET');
        const result = (yield call(r, request)) as ReturnUnpackPromise<typeof r>;
        yield put(MakeIAction(result.data.data.responeId?.toString()));
    } catch (ex) {
        const error = ex as IBaseException<any>;
    }
}

export default function* saga() {
    yield takeEvery(__COMPONENT___REDUCER_KEY.ACTION, runAction);
}
